{"ast":null,"code":"import CurrentCity from\"./components/CurrentCity\";import Forecast from\"./components/Forecast\";import OtherCities from\"./components/OtherCities\";import SearchBar from\"./components/SearchBar\";import{useState,useEffect,useCallback}from\"react\";import axios from\"axios\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const WeatherCard=()=>{const cities=[{name:\"Brisbane\",lat:-27.4698,lon:153.0251},{name:\"Sydney\",lat:-33.8688,lon:151.2093},{name:\"Shanghai\",lat:31.2304,lon:121.4737},{name:\"New York\",lat:40.7128,lon:-74.006},{name:\"London\",lat:51.5074,lon:-0.1278}];const[currentWeather,setCurrentWeather]=useState(null);const[forecast,setForecast]=useState(null);const[otherCitiesWeather,setOtherCitiesWeather]=useState([]);const[selectedCoordinates,setSelectedCoordinates]=useState(cities[0]);const fetchWeatherData=useCallback(async()=>{if(!selectedCoordinates)return;// Prevent API call on empty city\ntry{const response=await axios.get(`/api/weather?lat=${selectedCoordinates.lat}&lon=${selectedCoordinates.lon}`);const weatherData=response.data;setCurrentWeather({city:selectedCoordinates.name,temp:weatherData.current.temp,tempRange:{min:weatherData.daily[0].temp.min,max:weatherData.daily[0].temp.max},condition:weatherData.current.weather[0].description,humidity:weatherData.current.humidity,windSpeed:weatherData.current.wind_speed,uvIndex:weatherData.current.uvi,feelsLike:weatherData.current.feels_like,dateTime:new Date(weatherData.current.dt*1000).toLocaleString(\"en-GB\",{day:\"numeric\",month:\"long\",weekday:\"long\",hour:\"2-digit\",minute:\"2-digit\"})});setForecast(weatherData.daily.slice(1,5).map(day=>({date:new Date(day.dt*1000).toLocaleDateString(\"en-GB\",{day:\"numeric\",month:\"long\"}),day:new Date(day.dt*1000).toLocaleDateString(\"en-US\",{weekday:\"long\"}),condition:day.weather[0].description,tempRange:{min:day.temp.min,max:day.temp.max}})));}catch(error){console.error(\"Error fetching weather data:\",error);}},[selectedCoordinates]);const fetchOtherCitiesWeather=useCallback(async()=>{const otherCitiesData=[];for(const city of cities.slice(1)){try{const response=await axios.get(`/api/weather?lat=${selectedCoordinates.lat}&lon=${selectedCoordinates.lon}`);const weatherData=response.data;otherCitiesData.push({...city,tempRange:{min:weatherData.daily[0].temp.min,max:weatherData.daily[0].temp.max},condition:weatherData.current.weather[0].description});}catch(error){console.error(`Error fetching weather for ${city}:`,error);}}setOtherCitiesWeather(otherCitiesData);});useEffect(()=>{fetchWeatherData();},[selectedCoordinates]);useEffect(()=>{fetchOtherCitiesWeather();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-slate opacity-100 w-4/5 h-auto m-6 min-w-[360px] md:max-w-screen-lg md:aspect-[5/3] relative z-10 rounded-3xl shadow-lg grid grid-cols-2 grid-rows-11 md:grid-cols-6 md:grid-rows-6 gap-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"row-span-6 col-span-2 m-6 md:max-lg:m-4 rounded-3xl bg-gradient-to-tl relative\",children:/*#__PURE__*/_jsx(CurrentCity,{data:currentWeather})}),/*#__PURE__*/_jsx(\"div\",{className:\"row-span-2 col-span-2 p-4 md:max-lg:m-6 md:p-0 md:row-span-3 md:col-span-4 lg:mr-8 lg:mt-8\",children:/*#__PURE__*/_jsx(Forecast,{data:forecast})}),/*#__PURE__*/_jsx(\"div\",{className:\"row-span-1 col-span-2 p-4 md:max-lg:m-0 md:max-lg:pl-6 md:col-span-3 lg:p-0 lg:m-6\",children:/*#__PURE__*/_jsx(SearchBar,{setSelectedCoordinates:setSelectedCoordinates})}),/*#__PURE__*/_jsx(\"div\",{className:\"row-span-2 col-span-2 p-4 md:row-span-2 md:col-span-4 md:max-lg:p-0 md:my-4 md:mr-8\",children:/*#__PURE__*/_jsx(OtherCities,{data:otherCitiesWeather,setSelectedCoordinates:setSelectedCoordinates})})]});};export default WeatherCard;","map":{"version":3,"names":["CurrentCity","Forecast","OtherCities","SearchBar","useState","useEffect","useCallback","axios","jsx","_jsx","jsxs","_jsxs","WeatherCard","cities","name","lat","lon","currentWeather","setCurrentWeather","forecast","setForecast","otherCitiesWeather","setOtherCitiesWeather","selectedCoordinates","setSelectedCoordinates","fetchWeatherData","response","get","weatherData","data","city","temp","current","tempRange","min","daily","max","condition","weather","description","humidity","windSpeed","wind_speed","uvIndex","uvi","feelsLike","feels_like","dateTime","Date","dt","toLocaleString","day","month","weekday","hour","minute","slice","map","date","toLocaleDateString","error","console","fetchOtherCitiesWeather","otherCitiesData","push","className","children"],"sources":["D:/JR/weather-app/client/src/components/WeatherCard/WeatherCard.js"],"sourcesContent":["import CurrentCity from \"./components/CurrentCity\";\r\nimport Forecast from \"./components/Forecast\";\r\nimport OtherCities from \"./components/OtherCities\";\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst WeatherCard = () => {\r\n  const cities = [\r\n    { name: \"Brisbane\", lat: -27.4698, lon: 153.0251 },\r\n    { name: \"Sydney\", lat: -33.8688, lon: 151.2093 },\r\n    { name: \"Shanghai\", lat: 31.2304, lon: 121.4737 },\r\n    { name: \"New York\", lat: 40.7128, lon: -74.006 },\r\n    { name: \"London\", lat: 51.5074, lon: -0.1278 },\r\n  ];\r\n\r\n  const [currentWeather, setCurrentWeather] = useState(null);\r\n  const [forecast, setForecast] = useState(null);\r\n  const [otherCitiesWeather, setOtherCitiesWeather] = useState([]);\r\n  const [selectedCoordinates, setSelectedCoordinates] = useState(cities[0]);\r\n\r\n  const fetchWeatherData = useCallback(async () => {\r\n    if (!selectedCoordinates) return; // Prevent API call on empty city\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `/api/weather?lat=${selectedCoordinates.lat}&lon=${selectedCoordinates.lon}`\r\n      );\r\n      const weatherData = response.data;\r\n\r\n      setCurrentWeather({\r\n        city: selectedCoordinates.name,\r\n        temp: weatherData.current.temp,\r\n        tempRange: {\r\n          min: weatherData.daily[0].temp.min,\r\n          max: weatherData.daily[0].temp.max,\r\n        },\r\n        condition: weatherData.current.weather[0].description,\r\n        humidity: weatherData.current.humidity,\r\n        windSpeed: weatherData.current.wind_speed,\r\n        uvIndex: weatherData.current.uvi,\r\n        feelsLike: weatherData.current.feels_like,\r\n        dateTime: new Date(weatherData.current.dt * 1000).toLocaleString(\r\n          \"en-GB\",\r\n          {\r\n            day: \"numeric\",\r\n            month: \"long\",\r\n            weekday: \"long\",\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n          }\r\n        ),\r\n      });\r\n\r\n      setForecast(\r\n        weatherData.daily.slice(1, 5).map((day) => ({\r\n          date: new Date(day.dt * 1000).toLocaleDateString(\"en-GB\", {\r\n            day: \"numeric\",\r\n            month: \"long\",\r\n          }),\r\n          day: new Date(day.dt * 1000).toLocaleDateString(\"en-US\", {\r\n            weekday: \"long\",\r\n          }),\r\n          condition: day.weather[0].description,\r\n          tempRange: { min: day.temp.min, max: day.temp.max },\r\n        }))\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error fetching weather data:\", error);\r\n    }\r\n  }, [selectedCoordinates]);\r\n\r\n  const fetchOtherCitiesWeather = useCallback(async () => {\r\n    const otherCitiesData = [];\r\n\r\n    for (const city of cities.slice(1)) {\r\n      try {\r\n        const response = await axios.get(\r\n          `/api/weather?lat=${selectedCoordinates.lat}&lon=${selectedCoordinates.lon}`\r\n        );\r\n        const weatherData = response.data;\r\n\r\n        otherCitiesData.push({\r\n          ...city,\r\n          tempRange: {\r\n            min: weatherData.daily[0].temp.min,\r\n            max: weatherData.daily[0].temp.max,\r\n          },\r\n          condition: weatherData.current.weather[0].description,\r\n        });\r\n      } catch (error) {\r\n        console.error(`Error fetching weather for ${city}:`, error);\r\n      }\r\n    }\r\n    setOtherCitiesWeather(otherCitiesData);\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchWeatherData();\r\n  }, [selectedCoordinates]);\r\n\r\n  useEffect(() => {\r\n    fetchOtherCitiesWeather();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"bg-slate opacity-100 w-4/5 h-auto m-6 min-w-[360px] md:max-w-screen-lg md:aspect-[5/3] relative z-10 rounded-3xl shadow-lg grid grid-cols-2 grid-rows-11 md:grid-cols-6 md:grid-rows-6 gap-4\">\r\n      <div className=\"row-span-6 col-span-2 m-6 md:max-lg:m-4 rounded-3xl bg-gradient-to-tl relative\">\r\n        <CurrentCity data={currentWeather} />\r\n      </div>\r\n      <div className=\"row-span-2 col-span-2 p-4 md:max-lg:m-6 md:p-0 md:row-span-3 md:col-span-4 lg:mr-8 lg:mt-8\">\r\n        <Forecast data={forecast} />\r\n      </div>\r\n      <div className=\"row-span-1 col-span-2 p-4 md:max-lg:m-0 md:max-lg:pl-6 md:col-span-3 lg:p-0 lg:m-6\">\r\n        <SearchBar setSelectedCoordinates={setSelectedCoordinates} />\r\n      </div>\r\n      <div className=\"row-span-2 col-span-2 p-4 md:row-span-2 md:col-span-4 md:max-lg:p-0 md:my-4 md:mr-8\">\r\n        <OtherCities\r\n          data={otherCitiesWeather}\r\n          setSelectedCoordinates={setSelectedCoordinates}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}